FinanceBuddy - Simple Setup Guide

FinanceBuddy is a Django + React (Vite/TypeScript) prototype for options trading education.



------------------------------------------------------------
1) PREREQS
- Windows 10/11
-macOS Sequoia 15.7
- Python 3.11+
- Node.js 18+ (includes npm)
- Docker Desktop (running)
- Git (optional)
- PyCharm (optional)

------------------------------------------------------------
2) GET THE CODE (ZIP OR GIT)

Option A — Zip
- Unzip to: C:\Users\<you>\PycharmProjects\FinanceBuddy
- Expected layout:
  FinanceBuddy/
    backend/
    frontend/
    .env.example

Option B — Git
  cd C:\Users\<you>\PycharmProjects
  git clone https://github.com/<your-username>/FinanceBuddy.git
  cd FinanceBuddy

------------------------------------------------------------
3) BACKEND SETUP (PYTHON VENV + DEPS)
  cd backend
  python -m venv .venv
  .\.venv\Scripts\Activate.ps1
  python -m pip install --upgrade pip
  pip install -r requirements.txt

------------------------------------------------------------
4) DATABASE (DOCKER DESKTOP: POSTGRESQL)
We run a blank local Postgres in Docker. Schema/data come from Django migrations/fixtures.

One-time create (then reuse):
  docker volume create optionstrdr-data
  docker run -d ^
    --name optionstrdr-db ^
    -e POSTGRES_DB=optionstrdr ^
    -e POSTGRES_USER=finacedjango ^
    -e POSTGRES_PASSWORD=changeme ^
    -p 5432:5432 ^
    -v optionstrdr-data:/var/lib/postgresql/data ^
    postgres:16

Start/stop later:
  docker start optionstrdr-db
  docker stop optionstrdr-db

------------------------------------------------------------
5) ENVIRONMENT VARIABLES

Create backend/.env
  SECRET_KEY=replace-me-for-local-dev
  DEBUG=1
  ALLOWED_HOSTS=127.0.0.1,localhost
  DATABASE_URL=postgres://finacedjango:changeme@localhost:5432/optionstrdr
  TWELVEDATA_API_KEY=your_key_here
  EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend
  EMAIL_HOST=smtp.gmail.com
  EMAIL_PORT=587
  EMAIL_USE_TLS=1
  SMTP_USER=youraddress@gmail.com
  SMTP_PASSWORD=your_app_password
  DEFAULT_FROM_EMAIL=FinanceBuddy <youraddress@gmail.com>

Create frontend/.env
  VITE_API_URL=http://127.0.0.1:8000

------------------------------------------------------------
6) APPLY MIGRATIONS & CREATE A USER
  # DB running
  cd backend
  .\.venv\Scripts\Activate.ps1
  python manage.py makemigrations
  python manage.py migrate
  python manage.py createsuperuser
  # optional demo data:
  # python manage.py loaddata backend/fixtures/seed.json

------------------------------------------------------------
7) FRONTEND SETUP (VITE/REACT)
  cd frontend
  npm install

------------------------------------------------------------
8) RUN LOCALLY
Repo is already wired so Django serves the built SPA.

  # Build SPA
  cd frontend
  npm run build

  # Run backend
  cd ..\backend
  .\.venv\Scripts\Activate.ps1
  python manage.py runserver

Visit: http://127.0.0.1:8000

For active frontend development you can still run:
  npm run dev  (in frontend)
and call the backend at http://127.0.0.1:8000

------------------------------------------------------------
9) TROUBLESHOOTING

- FileNotFoundError ... frontend\dist\index.html
  -> Run npm run build in frontend/

- Static JS/CSS not loading
  -> Ensure frontend/dist/assets/ exists; rebuild

- ProgrammingError: relation "auth_user" does not exist
  -> Run migrations: python manage.py migrate (DB must be running)

- Django can’t connect to Postgres
  -> Ensure Docker Desktop is running and optionstrdr-db is up (docker ps)
  -> Check DATABASE_URL in backend/.env

- Email SMTP
  -> For Gmail, use an App Password for SMTP_PASSWORD

- CORS in two-server dev
  -> If using npm run dev + Django, allow http://127.0.0.1:5173 in dev settings
